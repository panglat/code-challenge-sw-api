{"version":3,"sources":["components/base-components/Header/index.tsx","components/app-components/SWHeader/index.tsx","components/base-components/Selector/index.tsx","business/StarWars/Planets/selectors.ts","components/base-components/Button/index.tsx","helpers/numbers.ts","components/app-components/PlanetList/PlanetListItem/index.tsx","components/base-components/LoadingSpinner/index.tsx","components/app-components/PlanetList/index.tsx","components/base-components/SimpleModal/index.tsx","components/app-components/PlanetDetailsModal/index.tsx","business/StarWars/Planets/actions.ts","business/StarWars/Planets/types.ts","components/app-components/PlanetListView/index.tsx","components/app-components/SWMainContent/index.tsx","components/App/index.tsx","business/StarWars/Planets/reducer.ts","store/rootReducer.ts","api/StarWarsAPI.ts","models/StarWars/StarWarsAPIResponse.ts","models/StarWars/StarWarsPlanet.ts","service/StarWarsService.ts","business/StarWars/Planets/sagas.ts","store/rootSaga.ts","store/configureStore.js","store/index.js","index.tsx"],"names":["Header","children","className","cn","SWHeader","Selector","items","label","onChange","value","Object","keys","map","key","ButtonType","getStarWarsPlanets","state","planets","getStarWarsPlanetsLoading","loading","getStarWarsPlanetsError","error","getStarWarsPlanetsNext","next","replaceNAN","n","replace","PlanetListItem","planet","onClick","name","diameter","population","e","LoadingSpinner","PlanetListSortBy","Button","buttonType","primary","SimpleModal","onCloseModal","PlanetDetailsModal","rotationPeriod","orbitalPeriod","gravity","climate","terrain","PlanetList","sortBy","dispatch","useDispatch","useSelector","isFetchingData","dataFetchFailed","dataNext","useState","sortedPlanets","setSortedPlanets","selectedPlanet","setSelectedPlanet","useEffect","type","sortByNameDesc","sort","a","b","toLowerCase","sortByNameAsc","sortByPopulationAsc","sortByPopulationDesc","onItemClick","PlanetListView","setSortBy","event","target","SWMainContent","App","store","initialState","count","rootReducer","combineReducers","action","payload","results","StarWarsAPI","axios","create","baseURL","StarWarsAPIArrayResponse","previous","this","StarWarsPlanet","rotation_period","orbital_period","surface_water","url","surfaceWater","Axios","get","response","data","p","newResponse","console","log","fetchStarWarsPlanets","watchFetchStarWarsPlanets","sagas","select","call","result","put","takeLatest","all","rootSaga","startWarsPlanetsSagas","spawn","sagaMiddleware","createSagaMiddleware","preloadedState","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","run","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.396ded71.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { ClassValue } from 'classnames/types';\n\nimport './styles.scss';\n\ninterface headerProps {\n  className?: ClassValue;\n}\n\nconst Header: React.FC<headerProps> = ({ children, className }) => (\n  <header className={cn('header', className)}>{children}</header>\n);\n\nexport default Header;\n","import React from 'react';\n\nimport './styles.scss';\nimport Header from 'components/base-components/Header';\n\nconst SWHeader: React.FC = () => (\n  <Header className=\"sw-header layout\"> Star Wars API Test</Header>\n);\n\nexport default SWHeader;\n","import React from 'react';\nimport cn from 'classnames';\nimport { ClassValue } from 'classnames/types';\n\nimport './styles.scss';\n\ninterface SelectorProps {\n  className?: ClassValue;\n  items: any;\n  label: string;\n  onChange?: React.ChangeEventHandler<HTMLSelectElement>;\n  value: string | number;\n}\n\nconst Selector: React.FC<SelectorProps> = ({\n  className,\n  items,\n  label,\n  onChange = () => {},\n  value,\n}) => (\n  <label className={cn('selector__label', className)}>\n    <span className=\"selector__text\">{label}</span>\n    <select className=\"selector__select\" onChange={onChange} value={value}>\n      {Object.keys(items).map((key) => (\n        <option className=\"selector__option\" key={key} value={key}>\n          {items[key]}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nexport default Selector;\n","import { RootState } from 'store/rootReducer';\n\nexport const getStarWarsPlanets = (state: RootState) => state.planets.planets;\nexport const getStarWarsPlanetsLoading = (state: RootState) =>\n  state.planets.loading;\nexport const getStarWarsPlanetsError = (state: RootState) =>\n  state.planets.error;\nexport const getStarWarsPlanetsCount = (state: RootState) =>\n  state.planets.count;\nexport const getStarWarsPlanetsNext = (state: RootState) => state.planets.next;\n","import React from 'react';\nimport './styles.scss';\nimport cn from 'classnames';\nimport { ClassValue } from 'classnames/types';\n\nexport enum ButtonType {\n  primary,\n  secondary,\n}\n\ninterface ButtonProps {\n  buttonType?: ButtonType;\n  className?: ClassValue;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  buttonType = ButtonType.primary,\n  className,\n  children,\n  onClick = () => {},\n}) => (\n  <button\n    className={cn(\n      'button',\n      {\n        [`button--${ButtonType[buttonType]}`]: ButtonType[buttonType],\n      },\n      className\n    )}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","/* eslint-disable no-self-compare */\nexport const replaceNAN = (n: number, replace: string) =>\n  n !== n ? replace : n;\n","import React from 'react';\nimport StarWarsPlanet from 'models/StarWars/StarWarsPlanet';\nimport { replaceNAN } from 'helpers/numbers';\n\nimport './styles.scss';\n\ninterface PlanetListItemProps {\n  onClick: (planet: StarWarsPlanet) => void;\n  planet: StarWarsPlanet;\n}\n\nconst PlanetListItem: React.FC<PlanetListItemProps> = ({ planet, onClick }) => {\n  const { name, diameter, population } = planet;\n  return (\n    <button className=\"planet-list-item\" onClick={(e) => onClick(planet)}>\n      <div className=\"planet-list-item__user-information\">\n        <h2 className=\"planet-list-item__paragraph\">Name: {name}</h2>\n        <p className=\"planet-list-item__paragraph\">\n          Diameter: {replaceNAN(diameter, 'unknown')} km\n        </p>\n        <p className=\"planet-list-item__paragraph\">\n          Population: {replaceNAN(population, 'unknown')}\n        </p>\n      </div>\n    </button>\n  );\n};\n\nexport default PlanetListItem;\n","import React from 'react';\n\nimport './styles.scss';\n\nconst LoadingSpinner = () => (\n  <div className=\"loading-spinner\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingSpinner;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestStarWarsPlanets } from 'business/StarWars/Planets/actions';\nimport {\n  getStarWarsPlanets,\n  getStarWarsPlanetsError,\n  getStarWarsPlanetsLoading,\n  getStarWarsPlanetsNext,\n} from 'business/StarWars/Planets/selectors';\nimport PlanetListItem from './PlanetListItem';\nimport StarWarsPlanet from 'models/StarWars/StarWarsPlanet';\nimport LoadingSpinner from 'components/base-components/LoadingSpinner';\nimport Button from 'components/base-components/Button';\nimport cn from 'classnames';\nimport { ClassValue } from 'classnames/types';\n\nimport './styles.scss';\nimport PlanetDetailsModal from '../PlanetDetailsModal';\n\nexport enum PlanetListSortBy {\n  noSort = 'No sort',\n  sortByNameAsc = 'Name (Asc)',\n  sortByNameDesc = 'Name (Desc)',\n  sortByPopulationAsc = 'Population (Asc)',\n  sortByPopulationDesc = 'Population (Desc)',\n}\n\ninterface PlanetListProps {\n  className?: ClassValue;\n  sortBy?: string;\n}\n\nconst PlanetList: React.FC<PlanetListProps> = ({ className, sortBy }) => {\n  const dispatch = useDispatch();\n  const planets = useSelector(getStarWarsPlanets);\n  const isFetchingData = useSelector(getStarWarsPlanetsLoading);\n  const dataFetchFailed = useSelector(getStarWarsPlanetsError);\n  const dataNext = useSelector(getStarWarsPlanetsNext);\n  const [sortedPlanets, setSortedPlanets] = useState<StarWarsPlanet[]>([]);\n  const [selectedPlanet, setSelectedPlanet] = useState<StarWarsPlanet | null>();\n\n  useEffect(() => {\n    dispatch(requestStarWarsPlanets());\n  }, [dispatch]);\n\n  useEffect(() => {\n    switch (\n      PlanetListSortBy[(sortBy as unknown) as keyof typeof PlanetListSortBy]\n    ) {\n      case PlanetListSortBy.sortByNameDesc:\n        setSortedPlanets(\n          [...planets].sort((a, b) =>\n            a.name.toLowerCase() > b.name.toLowerCase() ? -1 : 1\n          )\n        );\n        break;\n      case PlanetListSortBy.sortByNameAsc:\n        setSortedPlanets(\n          [...planets].sort((a, b) =>\n            a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\n          )\n        );\n        break;\n      case PlanetListSortBy.sortByPopulationAsc:\n        setSortedPlanets(\n          [...planets].sort((a, b) => (a.population > b.population ? -1 : 1))\n        );\n        break;\n      case PlanetListSortBy.sortByPopulationDesc:\n        setSortedPlanets(\n          [...planets].sort((a, b) => (a.population > b.population ? 1 : -1))\n        );\n        break;\n      default:\n        setSortedPlanets(planets);\n    }\n  }, [planets, sortBy]);\n\n  const onItemClick = (planet: StarWarsPlanet) => {\n    setSelectedPlanet(planet);\n  };\n\n  return (\n    <div className={cn('planet-list', className)}>\n      <div className=\"planet-list__container\">\n        {sortedPlanets.map((planet) => (\n          <PlanetListItem\n            key={`${planet.name}-${planet.diameter}-${planet.population}`}\n            onClick={onItemClick}\n            planet={planet}\n          />\n        ))}\n      </div>\n      {isFetchingData && (\n        <div className=\"planet-list__loading-message\">\n          <LoadingSpinner />\n          <span>Fetching Planets</span>\n        </div>\n      )}\n      {!isFetchingData && dataFetchFailed && (\n        <div className=\"planet-list__failed-message\">Planets fetch failed</div>\n      )}\n      {!isFetchingData && dataNext && (\n        <Button\n          className=\"planet-list__more-button\"\n          onClick={() => dispatch(requestStarWarsPlanets())}\n        >\n          Get more planets\n        </Button>\n      )}\n      {!isFetchingData && !dataNext && (\n        <div className=\"planet-list__message\">End of list</div>\n      )}\n      {selectedPlanet && (\n        <PlanetDetailsModal\n          onCloseModal={() => {\n            setSelectedPlanet(null);\n          }}\n          planet={selectedPlanet}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PlanetList;\n","/**\n * @file Render a simple modal element.\n * @module base-components/SimpleModal\n */\nimport React from 'react';\nimport Button from '../Button';\n\nimport './styles.scss';\n\ninterface SimpleModalProps {\n  onCloseModal: () => void;\n}\n\nconst SimpleModal: React.FC<SimpleModalProps> = ({\n  children,\n  onCloseModal,\n}) => (\n  <div className=\"simple-modal\">\n    <section className=\"simple-modal__main\">\n      {children}\n      <div className=\"simple-modal__actions\">\n        <Button onClick={onCloseModal}>Close</Button>\n      </div>\n    </section>\n  </div>\n);\n\nexport default SimpleModal;\n","import React from 'react';\nimport SimpleModal from 'components/base-components/SimpleModal';\nimport StarWarsPlanet from 'models/StarWars/StarWarsPlanet';\n\nimport './styles.scss';\nimport { replaceNAN } from 'helpers/numbers';\n\ninterface PlanetDetailsModalProps {\n  onCloseModal: () => void;\n  planet: StarWarsPlanet;\n}\nconst PlanetDetailsModal: React.FC<PlanetDetailsModalProps> = ({\n  onCloseModal,\n  planet,\n}) => {\n  return (\n    <SimpleModal onCloseModal={onCloseModal}>\n      <div className=\"user-details-modal\">\n        <h2>{`${planet.name}`}</h2>\n        <p>\n          <b>Diameter:</b> {replaceNAN(planet.diameter, 'unknown')} km\n        </p>\n        <p>\n          <b>Rotation Period:</b> {replaceNAN(planet.rotationPeriod, 'unknown')}{' '}\n          hours\n        </p>\n        <p>\n          <b>Orbital Period:</b> {replaceNAN(planet.orbitalPeriod, 'unknown')}{' '}\n          days\n        </p>\n        <p>\n          <b>Gravity:</b> {planet.gravity} Gs\n        </p>\n        <p>\n          <b>Population:</b> {replaceNAN(planet.population, 'unknown')}\n        </p>\n        <p>\n          <b>Climate:</b> {planet.climate}\n        </p>\n        <p>\n          <b>Terrain:</b> {planet.terrain}\n        </p>\n      </div>\n    </SimpleModal>\n  );\n};\n\nexport default PlanetDetailsModal;\n","import {\n  STAR_WARS_PLANETS_FETCH_REQUESTED,\n  STAR_WARS_PLANETS_FETCH_SUCCEEDED,\n  STAR_WARS_PLANETS_FETCH_FAILED,\n  StarWarsPlanetActions,\n} from './types';\nimport StarWarsPlanet from 'models/StarWars/StarWarsPlanet';\nimport StarWarsAPIArrayResponse from 'models/StarWars/StarWarsAPIResponse';\n\nexport function requestStarWarsPlanets(): StarWarsPlanetActions {\n  return {\n    type: STAR_WARS_PLANETS_FETCH_REQUESTED,\n  };\n}\n\nexport function requestStarWarsPlanetsSuccess(\n  response: StarWarsAPIArrayResponse<StarWarsPlanet>\n): StarWarsPlanetActions {\n  return {\n    type: STAR_WARS_PLANETS_FETCH_SUCCEEDED,\n    payload: response,\n  };\n}\n\nexport function requestStarWarsPlanetsError(\n  error: Error\n): StarWarsPlanetActions {\n  return {\n    type: STAR_WARS_PLANETS_FETCH_FAILED,\n    payload: error,\n  };\n}\n","import StarWarsAPIArrayResponse from 'models/StarWars/StarWarsAPIResponse';\nimport StarWarsPlanet from 'models/StarWars/StarWarsPlanet';\n\nexport const STAR_WARS_PLANETS_FETCH_REQUESTED =\n  'STAR_WARS_PLANETS_FETCH_REQUESTED';\nexport const STAR_WARS_PLANETS_FETCH_SUCCEEDED =\n  'STAR_WARS_PLANETS_FETCH_SUCCEEDED';\nexport const STAR_WARS_PLANETS_FETCH_FAILED = 'STAR_WARS_PLANETS_FETCH_FAILED';\nexport const STAR_WARS_PLANETS_FETCH_CLEAR = 'STAR_WARS_PLANETS_FETCH_CLEAR';\n\nexport interface StarWarsPlanetsFetchRequestedAction {\n  type: typeof STAR_WARS_PLANETS_FETCH_REQUESTED;\n}\n\ninterface StarWarsPlanetsFetchSucceededAction {\n  type: typeof STAR_WARS_PLANETS_FETCH_SUCCEEDED;\n  payload: StarWarsAPIArrayResponse<StarWarsPlanet>;\n}\n\ninterface StarWarsPlanetsFetchFailedAction {\n  type: typeof STAR_WARS_PLANETS_FETCH_FAILED;\n  payload: Error;\n}\n\nexport interface StarWarsPlanetsFetchClearAction {\n  type: typeof STAR_WARS_PLANETS_FETCH_CLEAR;\n}\n\nexport type StarWarsPlanetActions =\n  | StarWarsPlanetsFetchRequestedAction\n  | StarWarsPlanetsFetchSucceededAction\n  | StarWarsPlanetsFetchFailedAction\n  | StarWarsPlanetsFetchClearAction;\n\nexport interface StarWarsPlanetState {\n  planets: Array<StarWarsPlanet>;\n  loading: boolean;\n  error: Error | null;\n  count: number;\n  next: string | null;\n}\n","import React, { useState } from 'react';\n\nimport './styles.scss';\nimport Selector from 'components/base-components/Selector';\nimport PlanetList, { PlanetListSortBy } from '../PlanetList';\n\nconst PlanetListView: React.FC = () => {\n  const [sortBy, setSortBy] = useState('');\n\n  return (\n    <div className=\"planet-list-view\">\n      <h1 className=\"planet-list-view__main-title\">Planets API</h1>\n      <p className=\"planet-list-view__paragraph\">\n        This is an example of a simple API call. The list can be sorted using\n        the selector\n      </p>\n      <Selector\n        className=\"planet-list-view__selector\"\n        items={PlanetListSortBy}\n        label=\"Sort by\"\n        onChange={(event) => {\n          setSortBy(event.target.value);\n        }}\n        value={sortBy}\n      />\n      <PlanetList className=\"planet-list-view__list\" sortBy={sortBy} />\n    </div>\n  );\n};\n\nexport default PlanetListView;\n","import React from 'react';\nimport PlanetListView from '../PlanetListView';\n\nimport './styles.scss';\n\nconst SWMainContent: React.FC = () => (\n  <section className=\"sw-main-content layout\">\n    {' '}\n    <PlanetListView />{' '}\n  </section>\n);\n\nexport default SWMainContent;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport 'index.scss';\nimport SWHeader from 'components/app-components/SWHeader';\nimport SWMainContent from 'components/app-components/SWMainContent';\n\ninterface AppProps {\n  store: any;\n}\n\nconst App: React.FC<AppProps> = ({ store }) => {\n  return (\n    <Provider store={store}>\n      <SWHeader />\n      <SWMainContent />\n    </Provider>\n  );\n};\n\nexport default App;\n","import {\n  STAR_WARS_PLANETS_FETCH_REQUESTED,\n  STAR_WARS_PLANETS_FETCH_SUCCEEDED,\n  STAR_WARS_PLANETS_FETCH_FAILED,\n  StarWarsPlanetActions,\n  StarWarsPlanetState,\n  STAR_WARS_PLANETS_FETCH_CLEAR,\n} from './types';\n\nconst initialState: StarWarsPlanetState = {\n  loading: false,\n  error: null,\n  planets: [],\n  count: 0,\n  next: null,\n};\n\nexport function StarWarsPlanets(\n  state = initialState,\n  action: StarWarsPlanetActions\n): StarWarsPlanetState {\n  switch (action.type) {\n    case STAR_WARS_PLANETS_FETCH_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case STAR_WARS_PLANETS_FETCH_SUCCEEDED:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        planets: [...state.planets, ...action.payload.results],\n        next: action.payload.next,\n        count: action.payload.count,\n      };\n\n    case STAR_WARS_PLANETS_FETCH_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case STAR_WARS_PLANETS_FETCH_CLEAR:\n      return {\n        ...initialState,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { StarWarsPlanets } from 'business/StarWars/Planets/reducer';\n\nconst rootReducer = combineReducers({\n  planets: StarWarsPlanets,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import axios, { AxiosInstance } from 'axios';\n\nconst StarWarsAPI: AxiosInstance = axios.create({\n  baseURL: 'http://swapi.dev/api/',\n});\n\nexport default StarWarsAPI;\n","export interface StarWarsAPIArrayResponseData<T> {\n  count: number;\n  next: string;\n  previous: string;\n  results: Array<T>;\n}\n\nexport class StarWarsAPIArrayResponse<T> {\n  readonly count: number;\n  readonly next: string;\n  readonly previous: string;\n  readonly results: Array<T>;\n\n  constructor({\n    count,\n    next,\n    previous,\n    results,\n  }: StarWarsAPIArrayResponseData<T>) {\n    this.count = count;\n    this.next = next;\n    this.previous = previous;\n    this.results = results;\n  }\n}\n\nexport default StarWarsAPIArrayResponse;\n","export interface StarWarsPlanetData {\n  name: string;\n  rotation_period: string;\n  orbital_period: string;\n  diameter: string;\n  climate: string;\n  gravity: string;\n  terrain: string;\n  surface_water: string;\n  population: string;\n  url: string;\n}\n\nexport class StarWarsPlanet {\n  readonly name: string;\n  readonly rotationPeriod: number;\n  readonly orbitalPeriod: number;\n  readonly diameter: number;\n  readonly climate: string;\n  readonly gravity: string;\n  readonly terrain: string;\n  readonly surfaceWater: number;\n  readonly population: number;\n  readonly url: string;\n\n  constructor({\n    name,\n    rotation_period,\n    orbital_period,\n    diameter,\n    climate,\n    gravity,\n    terrain,\n    surface_water,\n    population,\n    url,\n  }: StarWarsPlanetData) {\n    this.name = name;\n    this.rotationPeriod = +rotation_period;\n    this.orbitalPeriod = +orbital_period;\n    this.diameter = +diameter;\n    this.climate = climate;\n    this.gravity = gravity;\n    this.terrain = terrain;\n    this.surfaceWater = +surface_water;\n    this.population = +population;\n    this.url = url;\n  }\n}\n\nexport default StarWarsPlanet;\n","/**\n * @file Manages user requests.\n * @module services/UserService\n */\nimport StarWarsAPI from 'api/StarWarsAPI';\nimport Axios from 'axios';\nimport StarWarsAPIArrayResponse, {\n  StarWarsAPIArrayResponseData,\n} from 'models/StarWars/StarWarsAPIResponse';\nimport StarWarsPlanet, {\n  StarWarsPlanetData,\n} from 'models/StarWars/StarWarsPlanet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getStarWarsPlanets = async (\n  next: string\n): Promise<StarWarsAPIArrayResponse<StarWarsPlanet>> => {\n  try {\n    const axios = next\n      ? Axios.get<StarWarsAPIArrayResponseData<StarWarsPlanetData>>(next)\n      : StarWarsAPI.get<StarWarsAPIArrayResponseData<StarWarsPlanetData>>(\n          'planets'\n        );\n    const response = await axios;\n    const data = response.data;\n    const planets = response.data.results.map((p) => new StarWarsPlanet(p));\n    const newResponse = { ...data, results: planets };\n    return new StarWarsAPIArrayResponse<StarWarsPlanet>(newResponse);\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n};\n","import { call, put, takeLatest, all, select } from 'redux-saga/effects';\nimport {\n  STAR_WARS_PLANETS_FETCH_REQUESTED,\n  StarWarsPlanetActions,\n} from './types';\nimport {\n  requestStarWarsPlanetsSuccess,\n  requestStarWarsPlanetsError,\n} from './actions';\nimport { getStarWarsPlanets } from 'service/StarWarsService';\nimport StarWarsAPIArrayResponse from 'models/StarWars/StarWarsAPIResponse';\nimport StarWarsPlanet from 'models/StarWars/StarWarsPlanet';\nimport { getStarWarsPlanetsNext } from './selectors';\n\nfunction* fetchStarWarsPlanets(action: StarWarsPlanetActions) {\n  try {\n    const next = yield select(getStarWarsPlanetsNext);\n    const result: StarWarsAPIArrayResponse<StarWarsPlanet> = yield call(() =>\n      getStarWarsPlanets(next)\n    );\n    yield put(requestStarWarsPlanetsSuccess(result));\n  } catch (e) {\n    yield put(requestStarWarsPlanetsError(e));\n  }\n}\n\nfunction* watchFetchStarWarsPlanets() {\n  yield takeLatest(STAR_WARS_PLANETS_FETCH_REQUESTED, fetchStarWarsPlanets);\n}\n\nexport default function* sagas() {\n  yield all([watchFetchStarWarsPlanets()]);\n}\n","import { all, spawn } from 'redux-saga/effects';\nimport startWarsPlanetsSagas from 'business/StarWars/Planets/sagas';\n\nexport default function* rootSaga() {\n  yield all([startWarsPlanetsSagas].map(spawn));\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState = {}) {\n  const composeEnhancers = composeWithDevTools({\n    // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n  });\n\n  // mount it on the Store\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n\n  // then run the saga\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","import configureStore from 'store/configureStore';\n\nexport const store = configureStore();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport { store } from 'store';\n\nimport 'index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}